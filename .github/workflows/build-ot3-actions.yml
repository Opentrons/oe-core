name: 'Build OT3 image on github workflows'
run-name: 'Building OT3 image for opentrons ${{ inputs.monorepo-ref }} and oe-core ${{ inputs.oe-core-ref }}'
on:
  workflow_dispatch:
    inputs:
      monorepo-ref:
        description: |
          Ref of https://github.com/opentrons/opentrons to build. This MUST be a full ref, e.g. refs/heads/edge, or '-' to indicate not-specified. If not specified, will be determined from the oe-core ref if specified, and then default to edge.
        required: true
        default: '-'
      oe-core-ref:
        description: |
          Ref of https://github.com/opentrons/oe-core to build. This is different from the ref specified in the github api/webUI when starting this workflow - that ref is what contains this workflow, this ref specifies what gets built. It MUST be a full ref, e.g. refs/heads/main, or '-' to indicate not-specified. If not specified, will be decided based on the monorepo ref; if that isn't specified, will be main.
        required: true
        default: '-'
      infra-stage:
        description: |
          What infra stage to run on. This should almost always be prod; staging and dev are useful when you explicitly want to test those infra stages.
        required: true
        type: choice
        options:
          - 'stage-prod'
          - 'stage-staging'
          - 'stage-dev'
        default: 'stage-prod'

jobs:
  run-build:
    strategy:
      matrix:
        build_env: [ '${{ inputs.infra-stage }}' ]
    name: 'Building images on ${{ matrix.build_env }}'
    timeout-minutes: 480
    runs-on: ['self-hosted', '${{matrix.build_env}}']
    steps:
      - name: Fetch initial sources for action
        uses: 'actions/checkout@v3'
        with:
          submodules: false
          fetch-depth: 0
          path: ./oe-core-for-workflow
      - name: Decide refs to build
        id: build-refs
        uses: './oe-core-for-workflow/.github/actions/build-refs'
        with:
          token: ${{ github.token }}
          monorepo: ${{ inputs.monorepo-ref }}
          oe-core: ${{ inputs.oe-core-ref }}
      - name: Check if release build
        id: check-release
        if:
          always()
        run: |
          echo "checking ${{steps.build-refs.outputs.monorepo}}"
          build_type="develop"
          if $(grep "ot3@" -q <<< ${{steps.build-refs.outputs.monorepo}}); then
            build_type="release"
          fi
          echo "Build Type is - ${build_type}"
          echo "build_type=${build_type}" >> $GITHUB_OUTPUT
      - name: Fetch oe-core source
        uses: 'actions/checkout@v3'
        with:
          submodules: false
          fetch-depth: 0
          ref: ${{steps.build-refs.outputs.oe-core}}
          path: ./oe-core
      - name: Fetch monorepo source
        uses: 'actions/checkout@v3'
        with:
          fetch-depth: 0
          ref: ${{ steps.build-refs.outputs.monorepo }}
          repository: Opentrons/opentrons
          path: ./opentrons
      - name: Sync oe-core submodules
        run: |
          chown -R `whoami` oe-core
          chown -R `whoami` opentrons
          cd oe-core
          ./update.sh
          cd ..
      - name: Configure AWS Credentials
        uses: './.github/actions/aws-credentials'
        id: aws
        with:
          access_key_id: ${{ secrets.ROBOT_STACK_AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.ROBOT_STACK_AWS_SECRET_ACCESS_KEY }}
          region: us-east-2
          stage: ${{ matrix.build_env }}
      - name: Build container
        run: |
          cd oe-core
          tmp_dir=$(mktemp -d -t ci-XXXXXXX)
          cp start.sh $tmp_dir/
          docker build -f ./Dockerfile --tag "ot3-image:latest" $tmp_dir
          cd ..
      - name: Apply CI config overrides
        run: |
          cd oe-core
          echo "" >> ./build/conf/local.conf
          echo 'DL_DIR = "/volumes/cache/downloads"' >> ./build/conf/local.conf
          echo 'GITDIR = "/volumes/cache/git"' >> ./build/conf/local.conf
          echo 'SSTATE_DIR = "/volumes/cache/sstate"' >> ./build/conf/local.conf
          echo 'OT_BUILD_TYPE = "${{steps.check-release.outputs.build_type}}"' >> ./build/conf/local.conf
          cd ..
      - name: Handle Release
        if: ${{ steps.check-release.outputs.build_type == 'release' }}
        shell: bash
        id: 'handle-release'
        run: |
          echo $(jq -V)
          aws --profile=${{ steps.aws.outputs.profile_name }} s3 cp --acl=public-read s3://${S3_ARTIFACT_ARN/arn:aws:s3:::/}/ot3-oe/releases.json}} .
           cat releases.json
